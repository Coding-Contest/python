{% macro make_import(data) %}
{%- if data.properties | length > 0 %}
from {{ data.exercise | to_snake }} import {{ data.properties | map("to_snake") | join(", ") }}
{%- else %}
import {{ data.exercise | to_snake }}
{% endif %}
{% endmacro %}

{% macro make_tests(data) %}
class {{ data.exercise | to_camel }}Test(unittest.TestCase):
    {%- if data.has_error %}
    {{ add_setup(error=data.has_error) | indent(4) }}
    {% endif %}
    {%- for case in data.cases recursive %}
        {%- if case.cases %}
        {%- if loop.nextitem is defined %}
        {{ "#" * loop.depth }} {{ case.description }}
        {% endif %}
        {{- loop(case.cases) }}
        {%- else %}
        def test_{{ case.description | to_snake }}(self):
            {%- if case | is_error %}
            {{- add_assert_raises(case) | indent(12) }}
            {%- else %}
            {{- add_assert_equal(case) | indent(12) }}
            {% endif %}
        {%- endif %}
    {%- endfor %}
{% endmacro %}

{% macro add_setup(error=False) %}
# Utility functions
def setUp(self):
{%- if error %}
    try:
        self.assertRaisesRegex
    except AttributeError:
        self.assertRaisesRegex = self.assertRaisesRegexp
{%- endif -%}
{% endmacro %}

{% macro add_assert_equal(case) %}
{%- if not case.input %}
self.assertEqual({{ case.property | to_snake }}(), {{ case | format_expect }})
{%- else %}
self.assertEqual({{ case.property | to_snake }}({{ case | format_input }}), {{ case | format_expect }})
{% endif %}
{% endmacro %}

{% macro add_assert_raises(case) %}
self.assertRaisesRegex({{ case.property | to_snake }}({{ case | format_input }}), {{ case | format_expect }})
{% endmacro %}

