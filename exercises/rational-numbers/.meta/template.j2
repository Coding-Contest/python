{%- import "generator_macros.j2" as macros with context -%}


{% macro test_case_arithmetic(case) -%}
    def test_{{ case["description"] | to_snake }}(self):
        pass
{%- endmacro %}

{% macro test_case_absolutevalue(case) -%}
    def test_{{ case["description"] | to_snake }}(self):
        # yyy
        pass
{%- endmacro %}

{% macro test_case_exponentiation(case) -%}
    {%- set input = case["input"] -%}
    def test_{{ case["description"] | to_snake }}(self):
        # xxx
        pass
{%- endmacro %}

{{ macros.header(imports=["Rational"]) }}

class {{ exercise | camel_case }}Test(unittest.TestCase):
    {% for mathtypescases in cases %}
    # Tests of type: {{ mathtypescases["description"] }}
        {% for mathoperationcases in mathtypescases["cases"] %}
    # {{ mathoperationcases["description"] }}
            {% for case in mathoperationcases["cases"] %}
                {% if mathtypescases["description"] == 'Arithmetic' %}
    {{ test_case_arithmetic(case) }}
                {% elif mathtypescases["description"] == 'Absolute value' %}
    {{ test_case_absolutevalue(case) }}
                {% elif mathtypescases["description"] == 'Exponentiation of a rational number' %}
    {{ test_case_exponentiation(case) }}
                {% endif %}
            {% endfor %}
        {% endfor %}
    {% endfor %}
{{ macros.footer() }}
