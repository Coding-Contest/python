from __future__ import division
import math

{% extends "master_template.j2" -%}
{% set imports = ["ComplexNumber"] %}

{%- macro translate_math(item) -%}
{{ item | replace("pi", "math.pi") | replace("e", "math.e") | replace("ln", "math.log") }}
{%- endmacro %}

{% macro test_case(case) -%}
    def test_{{ case["description"] | to_snake }}(self):
        {%- if case["property"] in ["real", "imaginary"] %}
        input_number = ComplexNumber({{ case["input"]["z"][0] }}, {{ case["input"]["z"][1] }})
        self.assertEqual(input_number.{{ case["property"] }}, {{ case["expected"] }})
        {%- elif "abs" in case["property"] %}
        self.assertEqual(abs(ComplexNumber({{ case["input"]["z"][0] }}, {{ case["input"]["z"][1] }})), {{ case["expected"] }})
        {%- elif "conjugate" in case["property"] %}
        input_number = ComplexNumber({{ case["input"]["z"][0] }}, {{ case["input"]["z"][1] }})
        expected = ComplexNumber({{ case["expected"][0] }}, {{ case["expected"][1] }})
        self.assertEqual(input_number.conjugate().real, expected.real)
        self.assertEqual(input_number.conjugate().imaginary, expected.imaginary)
        {%- elif case["property"] in ["add", "mul", "sub"] %}
        {%- set translate_op = {"add":"+","mul":"*", "sub":"-"} %}
        first_input = ComplexNumber({{ case["input"]["z1"][0] }}, {{ case["input"]["z1"][1]}})
        second_input = ComplexNumber({{ case["input"]["z2"][0] }}, {{ case["input"]["z2"][1] }})
        expected = ComplexNumber({{ case["expected"][0] }}, {{ case["expected"][1] }})
        self.assertEqual(first_input {{ translate_op[case["property"]] }} second_input, expected)
        {%- elif case["property"] == "div" %}
        input_number = ComplexNumber({{ case["input"]["z1"][0] | float }}, {{ case["input"]["z1"][1] | float }})
        expected = ComplexNumber({{ case["expected"][0] | float }}, {{ case["expected"][1] | float }})
        divider = ComplexNumber({{ case["input"]["z2"][0] | float }}, {{ case["input"]["z2"][1] | float }})
        self.assertEqual(input_number / divider, expected)
        {%- elif case["property"] == "exp" %}
        input_number = ComplexNumber({{ translate_math(case["input"]["z"][0]) }}, {{ translate_math(case["input"]["z"][1]) }})
        expected = ComplexNumber({{ translate_math(case["expected"][0]) }}, {{ translate_math(case["expected"][1]) }})
        actual = input_number.exp()
        self.assertAlmostEqual(actual.real, expected.real)
        self.assertAlmostEqual(actual.imaginary, expected.imaginary)
        {%- elif case["property"] == "eq" %}
        {%- if case["expected"] %}
        self.assertEqual(
        {% else %}
        self.assertNotEqual(
        {% endif %}
            ComplexNumber({{ case["input"]["z1"][0] }}, {{ case["input"]["z1"][1]}}),
            ComplexNumber({{ case["input"]["z2"][0] }}, {{ case["input"]["z2"][1] }}))
        {% endif %}
{%- endmacro %}