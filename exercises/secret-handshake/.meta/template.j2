{%- import "generator_macros.j2" as macros with context -%}
{{ macros.header(["commands","secret_code"]) }}

class {{ exercise | camel_case }}Test(unittest.TestCase):
    {% for supercase in cases -%}
    {% for case in supercase["cases"] -%}
    def test_{{ case["description"] | to_snake }}(self):
        self.assertEqual({{ case["property"] }}({{ case["input"]["number"] }}), {{ case["expected"] }})
    {% endfor %}
    {% endfor %}

    {% if additional_cases | length -%}

    # Additional tests for this track

    {% for case in additional_cases -%}
    @unittest.skip("extra-credit")
    def test_{{ case["description"] | to_snake }}(self):
        {% set exp = case["expected"] -%}
        {% if case["input"]["inner_func"] -%}
        {% set func = case["input"]["inner_func"] -%}
        {% if func["input"] | string | length > 25 -%}
        inp = {{ func["input"] }}
        {% set eval = case["property"] ~ "(" ~ func["property"] ~ "(inp))" -%}
        {% set exp = "inp" -%}
        {% else -%}
        {% set eval = case["property"] ~ "(" ~ func["property"] ~ "(" ~ func["input"] ~ "))" -%}
        {% endif -%}
        {% else -%}
        {% set eval = case["property"] ~ "(" ~ case["input"]["commands"] ~ ")" -%}
        {% endif -%}
        self.assertEqual({{ eval }}, {{ exp }})
    {% endfor %}
    {%- endif %}

{{ macros.footer() }}
