{%- import "generator_macros.j2" as macros with context -%}
{{ macros.header() }}

{% set filenames = comments | join("\n") | regex_find("[a-z-]*\.txt") -%}
{% set contents = comments | join("\n") | regex_split("[a-z-]*\.txt") -%}

class {{ exercise | camel_case }}Test(unittest.TestCase):
    @classmethod
    def setUpClass(self):
        ...
    @classmethod
    def tearDownClass(self):
        ...

{% set suite_tests = cases -%}

{%- macro test_case(case) -%}
    {% set expected = case['expected'] -%}
    {% set pattern = case['input']['pattern'] -%}
    {% set flags = case['input']['flags'] -%}
    {% set files = case['input']['files'] -%}
    def test_{{ case["description"] | to_snake }}(self):
        {% if files == filenames -%}
        {% set filename = "FILENAMES" -%}
        {% else -%}
        {% set filename = "[" + files[0] | regex_replace("\.txt|\-", "") | create_variable_name(suffix="filename") | upper + "]" -%}
        {% endif -%}
        self.assertMultiLineEqual(
            grep("{{ pattern }}", "{{ flags|join(" ") }}", {{ filename }}),
            {% if expected == [] -%}
            ""
            {% elif "-l" in flags -%}
            {{ expected | map('regex_replace', "\.txt|\-", "") | map("create_variable_name", suffix="filename") | map('upper') | join(' + "\\n" + ') }} + "\n"
            {% else %}
            {% for e in expected -%}
            "{{ e }}\n"
            {% endfor %}
            {% endif %}
        )
{%- endmacro -%}

{% for cases in suite_tests -%}
    # {{ cases["description"] }}
    {% for case in cases["cases"] -%}
    {{ test_case(case) }}
    {% endfor %}

{% endfor %}

{{ macros.footer() }}
