{%- import "generator_macros.j2" as macros with context -%}
{% set class_name = exercise | camel_case -%}
# {{ macros.header([class_name]) }}

{{ macros.header() }}

class {{ class_name }}Test(unittest.TestCase):
    {% for case in cases -%}
    {% for subcase in case["cases"] -%}
    def test_{{ subcase["description"] | to_snake }}(self):
        {% set expected = subcase["expected"] -%}
        {% set property = subcase["property"] -%}
        {% if "set" in subcase["input"] -%}
        {% set list = subcase["input"]["set"] -%}
        {% if list|length > 0 -%}
        sut = {{ class_name }}({{ list }})
        {%- else -%}
        sut = {{ class_name }}()
        {%- endif -%}
        {%- else -%}
        {% set list1 = subcase["input"]["set1"] -%}
        {%- if list1|length > 0 -%}
        set1 = {{ class_name }}({{ list1 }})
        {%- else -%}
        set1 = {{ class_name }}()
        {%- endif %}
        {% set list2 = subcase["input"]["set2"] -%}
        {% if list2|length > 0 -%}
        set2 = {{ class_name }}({{ list2 }})
        {%- else -%}
        set2 = {{ class_name }}()
        {%- endif %}
        {% if expected is iterable -%}
        {%- if expected|length > 0 -%}
        expected = {{ class_name }}({{ expected }})
        {%- else -%}
        expected = {{ class_name }}()
        {%- endif -%}
        {%- endif -%}
        {%- endif %}
        {% if property == "contains" -%}
        {%- if expected == true -%}
        self.assertIn({{ subcase["input"]["element"] }}, sut)
        {%- else -%}
        self.assertNotIn({{ subcase["input"]["element"] }}, sut)
        {% endif -%}
        {%- elif property == "difference" -%}
        self.assertEqual(set1 - set2, expected)
        {%- elif property == "empty" -%}
        self.assertIs(sut.is{{ property }}(), {{ expected }})
        {%- elif property == "equal" -%}
        {%- if expected == true -%}
        self.assertEqual(set1, set2)
        {%- else -%}
        self.assertNotEqual(set1, set2)
        {%- endif -%}
        {%- elif property == "intersection" -%}
        self.assertEqual(set1.{{ property }}(set2), expected)
        {%- elif property == "union" -%}
        self.assertEqual(set1 + set2, expected)
        {%- else -%}
        self.assertIs(set1.is{{ property }}(set2), {{ expected }})
        {%- endif %}
    {% endfor %}
    {% endfor %}

{{ macros.footer() }}
