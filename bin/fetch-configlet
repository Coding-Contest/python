#!/usr/bin/env python3.7
from datetime import datetime, timezone
import io
import json
import platform
import sys
import tarfile
import time
from urllib.request import urlopen


BACKOFF_TIME = 5
MAX_RETRIES = 5

def download_and_extract(url):
    with urlopen(url) as request:
        status = request.status
        if status >= 400:
            print(f"Unexpected {status} status from download server.")
            time.sleep(BACKOFF_TIME)
            return False
        response = request.read()
    print("extracting...")
    with tarfile.open(fileobj=io.BytesIO(response), mode="r:*") as file:
        file.extractall(path="bin/")
    return True


def get_os():
    os_ = platform.platform()
    if os_ == "Darwin":
        return "mac"
    elif os_ == "Windows":
        return "windows"
    return "linux"


def get_arch():
    return "64bit" if sys.maxsize > 2 ** 32 else "32bit"


def fetch_configlet():
    with urlopen(
        "https://api.github.com/repos/exercism/configlet/releases/latest"
    ) as request:
        status = request.status
        headers = dict(request.getheaders())
        response = request.read()
    if status >= 500:
        print(f"Sleeping due to {status} response from API.")
        time.sleep(5)
        return 1
    if status == 403:
        wait_until = datetime.fromtimestamp(
            int(headers["X-RateLimit-Reset"]), timezone.utc
        )
        delta = wait_until - datetime.now(timezone.utc)
        seconds = delta.total_seconds()
        wait = seconds + 5 if seconds > BACKOFF_TIME else BACKOFF_TIME
        print(f"Rate limited, sleeping {wait} seconds.")
        time.sleep(wait)
        return 1
    if status >= 400:
        sys.exit(f"Received unexpected {status} response from API.")
    data = json.loads(response.decode("utf-8"))
    version = data["tag_name"]
    machine_info = f"{get_os()}-{get_arch()}"
    name = f"configlet-{machine_info}.tgz"
    for asset in data["assets"]:
        if asset["name"] == name:
            print(f"Downloading configlet {version} for {machine_info}")
            for _ in range(MAX_RETRIES):
                if download_and_extract(asset["browser_download_url"]):
                    return 0
    return 1


def main():
    for _ in range(MAX_RETRIES):
        ret = fetch_configlet()
        if ret == 0:
            break
    return ret


if __name__ == "__main__":
    sys.exit(main())
